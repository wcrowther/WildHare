<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WildHare</name>
    </assembly>
    <members>
        <member name="M:WildHare.Extensions.CharExtensions.CharAt(System.String,System.Int32)">
            <summary>Returns the character at the position {i}.</summary>
        </member>
        <member name="M:WildHare.Extensions.CharExtensions.IsLetter(System.Char)">
            <summary>Inline version of char.IsLetterOrDigit(ch). ie: A-Z, a-z, and letters of other alphabets</summary>
        </member>
        <member name="M:WildHare.Extensions.CharExtensions.IsLetterOrDigit(System.Char)">
            <summary>Inline version of char.IsLetterOrDigit(ch). ie: Letters plus digits</summary>
        </member>
        <member name="M:WildHare.Extensions.CharExtensions.IsUpper(System.Char)">
            <summary>Inline version of char.IsUpper(ch). ie: Uppercase letters</summary>
        </member>
        <member name="M:WildHare.Extensions.CharExtensions.IsLower(System.Char)">
            <summary>Inline version of char.IsLower(ch). ie: Lowercase letters</summary>
        </member>
        <member name="M:WildHare.Extensions.CharExtensions.IsPunctuation(System.Char)">
            <summary>Inline version of char.IsPunctuation(ch). ie: Symbols used for punctuation in Western and other alphabets</summary>
        </member>
        <member name="M:WildHare.Extensions.CharExtensions.IsNumber(System.Char)">
            <summary>Inline version of char.IsNumber(ch). ie: All digits plus Unicode fractions and Roman numeral symbols</summary>
        </member>
        <member name="M:WildHare.Extensions.CharExtensions.IsDigit(System.Char)">
            <summary>Inline version of char.IsDigit(ch). ie: 0-9 plus digits of other alphabets</summary>
        </member>
        <member name="M:WildHare.Extensions.CharExtensions.IsSymbol(System.Char)">
            <summary>Inline version of char.IsSymbol(ch). ie: Most other printable symbols</summary>
        </member>
        <member name="M:WildHare.Extensions.CharExtensions.IsControl(System.Char)">
            <summary>Inline version of char.IsControl(ch). ie: Non-printable "control" characters below 0x20, such as \r, \n, and \0,
            and characters between 0x7F and 0x9A</summary>
        </member>
        <member name="M:WildHare.Extensions.CharExtensions.IsSeparator(System.Char)">
            <summary>Inline version of char.IsSeparator(ch). ie: Space plus all Unicode separator characters</summary>
        </member>
        <member name="M:WildHare.Extensions.CharExtensions.IsWhiteSpace(System.Char)">
            <summary>Inline version of char.IsWhiteSpace(ch). ie: All separators plus \n, \r, \t, \f, and \v</summary>  
        </member>
        <member name="M:WildHare.Extensions.CharExtensions.IsReturn(System.Char)">
            <summary>Returns true if char is a return char ie: \n, \r </summary>
        </member>
        <member name="M:WildHare.Extensions.CharExtensions.GetUnicodeCategory(System.Char)">
            <summary>Inline version of char.GetUnicodeCategory(ch)</summary>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToBool(System.String)">
            <summary>Converts string to bool. (case insensitive, defaults to false if string does not parse to true)</summary>
            <returns>An bool value</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToBool(System.String,System.String,System.Boolean)">
            <summary>Converts string to bool by comparing to the trueValue. Ignores case by default.</summary>
            <example>"yes".ToBool("yes") return true.</example>
            <example>"Yes".ToBool("yes", false) return false.</example>
            <returns>An bool value</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToBoolNullable(System.String,System.Nullable{System.Boolean})">
            <summary>Converts string to bool. Can be null. (case insensitive)</summary>
            <returns>An bool value</returns>
            <documentation>Test1</documentation>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToInt(System.String,System.Int32)">
            <summary>Converts strings to Int.</summary>
            <returns>An int value</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToIntNullable(System.String,System.Nullable{System.Int32})">
            <summary>Converts strings to Int if possible</summary>
            <returns>An int value or null</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToLong(System.String,System.Int64)">
            <summary>Converts strings to long</summary>
            <returns>A long value</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToLongNullable(System.String,System.Nullable{System.Int64})">
            <summary>Converts strings to long</summary>
            <returns>A long value or null</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToDouble(System.String,System.Double)">
            <summary>Converts strings to double.</summary>
            <returns>An double value</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToDoubleNullable(System.String,System.Nullable{System.Double})">
            <summary>Converts strings to double if possible</summary>
            <returns>An double value or null</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToDecimal(System.String,System.Decimal)">
            <summary>Converts strings to Decimal without without having to use an explicit try/catch</summary>
            <returns>A Decimal value</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToDecimalNullable(System.String,System.Nullable{System.Decimal})">
            <summary>Converts strings to Decimal if possible</summary>
            <returns>An Decimal value or null</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToDateTime(System.String,System.DateTime)">
            <summary>Converts strings to DateTime with default if unsuccessful</summary>
            <returns>A DateTime value</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToDateTime(System.String,System.Nullable{System.DateTime})">
            <summary>Converts strings to DateTime with default value of nullable (datetime or null) 
            if unsuccessful</summary>
            <returns>A nullable DateTime value</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToIntArray(System.String,System.Boolean,System.String)">
            <summary>Converts a string to an array of ints, using the {separator} as the divider (defaulting to a comma).
            With {strict} equals false, the default, the method will ignore any characters except for numbers, the negative symbol,
            or commas. With {strict} equals true, empty entries, alphabetic characters, etc. will cause exceptions.</summary>
        </member>
        <member name="M:WildHare.Extensions.DataTableExtensions.ToList``1(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of T</summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <returns>List{T}</returns>
        </member>
        <member name="T:WildHare.Extensions.DateTimeExtensions">
            <summary>DateTime Extensions</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.GetNextDayOfWeek(System.DateTime,System.DayOfWeek,System.Boolean)">
            <summary>Given a DateTime like {date}, gets the next {DayOfWeek}, like Sunday, Saturday, etc. as DateTime.
            If {includeDate} is true and {date} is that day of the week, then return that {date}.</summary>
            <example>Given {date} is 1/1/2020 (Wednesday) then date.GetNextDayOfWeek(DayOfTheWeek.Wednesday)
            returns the next Wednesday which is 1/8/2020. If {includeDate} is true then 1/1/2020.</example>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.FirstDayOfTheMonth(System.DateTime)">
            <summary>Gets a DateTime for the first day of the month for the given {datetime}.</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.FirstDayOfNextMonth(System.DateTime)">
            <summary>Gets a DateTime for the first day of the next month for the given {datetime}.</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.LastDayOfTheMonth(System.DateTime)">
            <summary>Gets a DateTime for the last day of the next month for the given {datetime}.</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.IsInTheSameMonth(System.DateTime,System.DateTime)">
            <summary>Returns a boolean true if the {datetime} and {target} are in the same month.</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.TodayOrBefore(System.DateTime,System.Boolean)">
            <summary>Returns a boolean true if the {datetime} is before DateTime.Today with time component set to 00.00.00 
            (the C# definition). When {includeAllOfToday} is true, any time in today is included.</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.NextDayOfWeek(System.DateTime,System.DayOfWeek,System.Boolean)">
            <summary>Given a DateTime {date}, returns the first instance of the day of the week. 
            If {includeCurrentDate} is true, then {date} is included. 
            ex. NextDayOfWeek for dayOfWeek "Wednesday" for {date} Sunday Aug 21, 2022 would be Aug 24, 2022.
            ex2. For the same {date}, for dayOfWeek "Sunday", and {includeCurrentDate} is true, 
            it the would return Aug 21, 2022, as it is a Sunday.</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.MonthName(System.DateTime)">
            <summary>Full name of the month for the given {date}</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.MonthName(System.Int32)">
            <summary>Full name of the month for the given int from 1 to 12. Throws an error if it is outside this range.</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.ShortMonthName(System.DateTime)">
            <summary>Short name of the month for the given {date}</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.ShortMonthName(System.Int32)">
            <summary>Short name of the month for the given int from 1 to 12. Throws an error if it is outside this range.</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.YearMonth(System.DateTime)">
            <summary>Returns a string with the four digit year and two digit month combined with no spaces.</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.YearMonthDay(System.DateTime)">
            <summary>Returns a string with the four digit year, two digit month, and two digit day combined with no spaces.</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.StartOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>Given a DateTime {date}, returns the starting day of the week. Typically {startOfWeek} 
            would be either a Sunday or Monday. This version is not culture aware.</summary>
        </member>
        <member name="T:WildHare.Extensions.Xtra.XtraExtensions">
            <summary>Xtra Extensions</summary>
        </member>
        <member name="M:WildHare.Extensions.Xtra.XtraExtensions.GetXmlDocumentation(System.String,System.Reflection.Assembly)">
            <summary>(EXPERIMENTAL) Returns a list Xml Documentation elements.
            Enable in VS by checking the Properties/Build/Enable Xml Documentation checkbox. On build,
            an XML file is generated to the file location with all the /// comments (like this one)
            that have been written in the your code.</summary>
            <example>@"C:Git\WildHare\WildHare\WildHare.xml"</example>
        </member>
        <member name="M:WildHare.Extensions.ExpandoExtensions.Get``1(System.Dynamic.ExpandoObject,System.String)">
            <summary> Gets item by string {name} but does not throw an exception if it does not exist.
            If an ExpandoObject is cast to dynamic, be sure to cast back to ExpandoObject to see this extension method.</summary>
        </member>
        <member name="M:WildHare.Extensions.ExpandoExtensions.Get(System.Dynamic.ExpandoObject,System.String)">
            <summary> Gets a string by string {name} but does not throw an exception if it does not exist.
            If an ExpandoObject is cast to dynamic, be sure to cast back to ExpandoObject to see this extension method.</summary>
        </member>
        <member name="M:WildHare.Extensions.ExpandoExtensions.Add``1(System.Dynamic.ExpandoObject,System.String,``0)">
            <summary>Add a {value} of (T) to the Expando using a string {name}. </summary>
        </member>
        <member name="M:WildHare.Extensions.ExpandoExtensions.Add(System.Dynamic.ExpandoObject,System.String,System.String)">
            <summary>Add a string to the Expando using a string {name}. </summary>
        </member>
        <member name="M:WildHare.Extensions.ExpandoExtensions.Remove(System.Dynamic.ExpandoObject,System.String)">
            <summary>Remove a value from the Expando using a string {name}. </summary>
        </member>
        <member name="M:WildHare.Extensions.ExpandoExtensions.Get``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>Gets a value from an ExpandoObject by the specified {key}. If it does not exist, the
            method returns the {defaultVal}. If this is not specified, it is the default for that type.</summary>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.ElementIn``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Takes the element in the list at the position of {index} looping around to the beginning
            of the list if the (zero-base) index is outside of the number of items in the list. Will always return an element
            unless there are no elements in the list, in which case it returns an exception.</summary>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.ElementInOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>Takes the element in the list at the position of {index} looping around to the beginning
            of the list if the (zero-based) index is outside of the number of items in the list. Will always return an element
            unless there are no elements in the list, in which case it returns the {defaultItem} of type TSource.</summary>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.ElementInOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Takes the element in the list at the position of {index} looping around to the beginning
            of the list if the (zero-based) index is outside of the number of items in the list. Will always return an element
            unless there are no elements in the list, in which case it returns the type default value.</summary>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.MatchList``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},System.Boolean)">
            <summary>Given two lists it returns values from first if the {func} is true. If {consecutive} 
            is false, continues returning values until one of the lists has no more elements.</summary>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.Sequence``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},System.Boolean)">
            <summary>Given two lists returns the values from first if func is true. 
            If {consecutive} is false continues until one of the lists has no  more elements.</summary>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.InList``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Func{``0,``1,System.Boolean})">
            <summary>Compares 2 lists and using the {comparer} to return an array of int positions
            where the items match.</summary>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.ToCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Converts IEnumerable to Collection of type parameter.
            Returns an empty Collection rather than failing if enumerable is null.</summary>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.WithIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Provides a 0-based index to a foreach loop using a tuple.</summary>
            <example>
            foreach (var (item, index) in collection.WithIndex() )
            {
                Debug.WriteLine($"{index} : {item}");
            }
            </example>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.AsString(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean,System.String)">
            <summary>Converts an IEnumerable of ints to a string. The method will return null if the {intList} parameter is null 
            when {strict} is false. When {strict} is true the methods will throw an exception.</summary>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.AsStringxx(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>Works similar to an inline string.Join implementation that concatenates 
            the strings in the Enumerable {strList} with the {separator} (with a default of ', ').
            Adds the capability to delete null entries if {removeNulls} is true (defaults to false) .</summary>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.AsString(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean,System.Boolean)">
            <summary>Works similar to an inline string.Join implementation that concatenates 
            the strings in the Enumerable {strList} with the {separator} (with a default of ', ').
            Adds the capability to delete null entries if {removeNulls} is true (defaults to false)
            and {trim} to Trim() strings.</summary>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.PatternMatch``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean})">
            <summary>Given a {list} enumerable and a {pattern} enumerable, it enumerates the list and
            returns the list item if the {func} returns true for the match to the pattern item.
            The list enumerates to the next item regardless of a match or not, but pattern does not
            enumerate to the next pattern unless it matched.</summary>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.Pluralize``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Will return the {singular} form of a word if the count of list is equal to 1, otherwise returns {plural}. If the parmeter 
            {plural} is omitted, it will add an "s" to the end, or an "es" if {singular} ends in "s","x","ch","sh","z", or "o").</summary>
            <example>When a list contains 1 element: list.Pluralize("clown") returns "clown";</example>
            <example>When a list contains 0 element: list.Pluralize("clown") returns "clowns";</example>
            <example>When a list contains 3 element: list.Pluralize("fox") returns "foxes";</example>
            <example>When a list contains 5 element: list.Pluralize("child", "children") returns "children";</example>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean)">
            <summary>Compact version of OrderBy / OrderDescending where you can pass in a bool.</summary>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.ToArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Convenience overload of ToArray() that allows passing in a selector. </summary>
        </member>
        <member name="T:WildHare.Extensions.IListExtensions">
            <summary>Class Summary</summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.TakeRandom``1(System.Collections.Generic.IList{``0},System.Int32,System.Random,System.Boolean)">
            <summary>Will randomly return a list of items from the {sourceList} equal to the {count} (up to the number in the list).<br />
            If the {count} is not specified, it will return one. If {remove} is true, the items are removed from the {sourceList}. </summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.TakeRandomOne``1(System.Collections.Generic.IList{``0},System.Random,System.Boolean)">
            <summary>Will randomly return a single item from the {sourceList}.  If {remove} is true, the item
            is removed from the {sourceList}.</summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.TakeNext``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Boolean)">
            <summary>Will return a sequencial list of items from the {sourceList} equal to the {count}(up to the number<b />
            remaining in the list).<br/>If the {count} is not specified, it will return one. If {remove} is true, the items
            are removed from the {sourceList}. If {offset} > 0, it will skip this number of records
            but will loop back to the beginning if necessary and elements exist.</summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.TakeNextOne``1(System.Collections.Generic.IList{``0},System.Int32,System.Boolean)">
            <summary>Will return a single item from the {sourceList}  If {remove} is true, the item
            is removed from the {sourceList}. If {offset} > 0, it will skip this number of records
            but will loop back to the beginning if necessary and elements exist.</summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.NextIn``1(``0,System.Collections.Generic.IList{``0},System.Int32)">
            <summary>Given an item in a list, it will return the next item in the list or the
            default for that type (null if non-numeric). The {distance} is an int with 1 for the
            next item (the default). 2 for the next item after that, and so on... </summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.PreviousIn``1(``0,System.Collections.Generic.IList{``0},System.Int32)">
            <summary>Given an item in a list, it will return the previous item in the list or the 
            default for that type (null if non-numeric). The {distance} is an int with 1 for the 
            previous item (the default). 2 for the previous item before that, and so on... </summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.NextInWhile``1(``0,System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>Given an item in a list, it will return the next items in the list while {func} 
            returns true. The {step} parameter can be used to take every nth item in a positive 
            or a negative direction. The step default is 1 to take the next and subsequent items.</summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.PreviousInWhile``1(``0,System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>Given an item in a list, it will return the previous items in the list while {func} 
            returns true. This method is a convenience and does the same thing as NextInWhile with a -1 step.</summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.IsFirstIn``1(``0,System.Collections.Generic.IList{``0})">
            <summary>Given an item in a list, returns true if the item is 
            the first element in the list.</summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.IsLastIn``1(``0,System.Collections.Generic.IList{``0})">
            <summary>Given an item in a list, returns true if the item is 
            the last element in the list.</summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Adds a AddRange to the IList&gt;T&gt; interface. List&gt;T&gt; already has a version,
            which this method will use if available.</summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.ReplaceItem``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <summary>Removes an item at the {index} in the {itemList} and replaces with the {newItem}. </summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.ReplaceItems``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{``0})">
            <summary>Replaces a list of {newItems} starting with the {index} with the same number of items in the {itemList}.</summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.CombineItems``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0)">
            <summary>Combines a {count} of items at the {index} in the {itemList} into a single {newItem}.</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.WriteToFile(System.String,System.String,System.Boolean)">
            <summary>Writes the {stringToWrite} to the {fileName} string. If {overwrite} is true, it will
            overwrite existing file returning a success boolean. It will create the file if it does not existe.</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.WriteToFile(System.String,System.IO.FileInfo,System.Boolean)">
            <summary>Writes the {stringToWrite} to the {fileName} FileInfo. If {overwrite} is true, it will
            overwrite existing file returning a success boolean. It will create the file if it does not exist.</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.AppendToFile(System.String,System.String)">
            <summary>Writes the {stringToWrite} to the end of the {fileName} content, returning true or false.</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.AppendToFile(System.String,System.IO.FileInfo)">
            <summary>Writes the {stringToWrite} to the end of the {fileName} FileInfo content, returning true or false.</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.GetAllDirectoriesAndFiles(System.IO.DirectoryInfo,System.Int32)">
            <summary>Gets a recursive list of FileSystemInfos (both directories and files) to a depth of {maxDepth}. 
            Defaults to a depth of 2.</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.IsDirectory(System.IO.FileSystemInfo)">
            <summary>Returns bool whether current FileSystemInfo is a directory.</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.GetAllFiles(System.String,System.String)">
            <summary>Gets a list of all files matching the {searchPattern} in current the directory and all subdirectories.</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.GetAllFiles(System.String,System.String[])">
            <summary>This overload gets a list of all files matching a string array of {fileExtensions}
            in current directory and all subdirectories, and does NOT use a searchPattern.
            Example: new[] { ".cshtml", ".razor" }</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.GetAllDirectories(System.String,System.Int32)">
            <summary>Gets a list of all directories in the current directory and 
            all subdirectories to the depth of {maxDepth}. Default {maxDepth} is 2.</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.ReadFile(System.IO.FileInfo,System.Boolean)">
            <summary>Gets the string content from a System.Io.FileInfo. If {strict} is true (the default),
            will throw an exception if the file is not found. If {strict} is false, will return null.</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.Child(System.IO.DirectoryInfo,System.String)">
            <summary>Gets the child DirectoryInfo that equals {directoryName}. Returns null if no matches.</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.Sibling(System.IO.DirectoryInfo,System.String)">
            <summary>Gets the sibling directory (at the same level as the DirectoryInfo) that 
            equals {directoryName}.  Returns null if no matches.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.String)">
            <summary>Append to StringBuilder when {ifCondition} is true.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>Inline version of string.IsNullOrEmpty()</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IsNullOrSpace(System.String)">
            <summary>Inline version of string.IsNullOrWhiteSpace()</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IsNull(System.String)">
            <summary>Inline version of to test for null</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IfNull(System.String,System.String)">
            <summary>A null string returns {replacement} if given, else an empty string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IfEmpty(System.String,System.String)">
            <summary>An empty string returns {replacement} else the string</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IfNullOrEmpty(System.String,System.String)">
            <summary>A null or empty string returns {replacement} if given, else an empty string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IfNullOrSpace(System.String,System.String)">
            <summary>A Null or whitespace string returns {replacement} if given, else an empty string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.NullIf(System.String,System.String)">
            <summary>Ignores string by returning null if the string {str} equals {str2}.</summary>
            <example>string field = "*"; var f = field.NullIf("*") ?? "Empty" ex: return "Empty"</example>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveStart(System.String,System.String)">
            <summary>Remove the start of a string if it exactly matches {start}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveEnd(System.String,System.String)">
            <summary>Remove the end of a string if it exactly matches {end}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveStartEnd(System.String,System.String,System.String)">
            <summary>Remove the start of a string if it matches {start} and end of a string if it matches {end}.
            If {end} is not specified use {start} for both values.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveStart(System.String,System.String[])">
            <summary>Removes the start of a string if it exactly matches any of the strings in the {startArray}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveEnd(System.String,System.String[])">
            <summary>Removes the end of a string if it exactly matches any of the strings in the {endArray}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveStartEnd(System.String,System.String[],System.String[])">
            <summary>Removes the start of a string if it exactly matches any of the strings in the {startArray} 
            and removes the end of a string if it exactly matches any of the strings in the {endArray}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveStartFromAllLines(System.String,System.String)">
            <summary>Remove the start of line if it exactly matches {start} for all lines in the string. Normalizes all
            line returns to Environment.NewLine. This can be useful for programmatically removing indents from long strings.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveStartFromAllLines(System.String,System.String[])">
            <summary>Remove the start of line if it exactly matches any string in the {startArray} for all lines in the string. Normalizes all line 
            returns to Environment.NewLine. This can be useful for programmatically removing indents from long strings.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveEndFromAllLines(System.String,System.String)">
            <summary>Remove the end of line if it exactly matches {end} for all lines in the string.
            Normalizes all line returns to Environment.NewLine.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveEndFromAllLines(System.String,System.String[])">
            <summary>Remove the end of line if it exactly matches any string in the {endArray} for all lines in the string.
            Normalizes all line returns to Environment.NewLine.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveIndents(System.String,System.Boolean)">
            <summary>Removes the indent from all lines of text in a string using the indent from the second line
            of text in the string as the indent to remove. The first line is typically where the verbatim and/or
            interpolation is declared and does not have an indent and so is skipped. If {removeInitialSpaces} is true
            (the default), it removes the first line if it only contains whitespace.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveExtraLines(System.String,System.Int32)">
            <summary>Removes extra whitespace lines of text in a string that are more than the {linesGreaterThan} 
            integer - keeping the first line. If {linesGreaterThan} is negative, it does nothing.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.GetStartWhitespaces(System.String)">
            <summary>Gets the all the whitespace at the beginning of a string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.AddStart(System.String,System.String)">
            <summary>Adds {addToStart} to the beginning of the string if string {s} is not NULL or EMPTY.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.AddEnd(System.String,System.String)">
            <summary>Adds {addToEnd} to the end of the string if string to add to {s} is not NULL or EMPTY.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.AddStartEnd(System.String,System.String,System.String)">
            <summary>Adds {addToStart} to the beginning of the string and {addToEnd} to the end of the string {s} if is not NULL or EMPTY.
            If {addToEnd} is NULL, adds {addToStart} to both the start and end..</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.EnsureStart(System.String,System.String)">
            <summary>Adds {addToStart} to the beginning of the string UNLESS it already starts with that string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.EnsureEnd(System.String,System.String)">
            <summary>Adds {addToEnd} to the end of the string UNLESS it already ends with that string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.EnsureStartEnd(System.String,System.String,System.String)">
            <summary>Adds {addToStart} to the beginning of the string if it does not start with that string AND
            adds {addToEnd} to the end of the string if it does not end with that string. If {addToEnd}
            is NULL, adds {addToStart} to both the start and end.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.GetStartBefore(System.String,System.String,System.Boolean)">
            <summary>Splits string into an array based on {separator} and returns the start element.
            Includes the separator if {includeSeparator} is true and it is contained in the string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.GetEndAfter(System.String,System.String,System.Boolean)">
            <summary>Splits string into an array based on {separator} and returns the end element.
            Includes the separator if {includeSeparator} is true and it is contained in the string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.NumbersOnly(System.String,System.String)">
            <summary>Returns a string with only numbers and any additional characters in {otherCharacters}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.LettersOnly(System.String,System.String)">
            <summary>Returns a string with only letters, and any additional characters in {otherCharacters}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.NumbersAndLettersOnly(System.String,System.String)">
            <summary>Returns a string with only numbers, letters, and any additional characters in {otherCharacters}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.CharactersOnly(System.String,System.String)">
            <summary>Returns a string with only characters in {includeCharacters}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IsNumbersOnly(System.String,System.String)">
            <summary>Returns true if the string includes only numbers and any additional characters in {otherCharacters}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IsLettersOnly(System.String,System.String)">
            <summary>Returns true if the string includes only letters, and any additional characters in {otherCharacters}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IsNumbersAndLettersOnly(System.String,System.String)">
            <summary>Returns true if the string includes only numbers, letters, and any additional characters in {otherCharacters}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IsCharactersOnly(System.String,System.String)">
            <summary>Returns true if the string includes only characters in {includeCharacters}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.String,System.Int32)">
            <summary>Truncates a string down if it is over {maxcharacters}. If truncated it adds {more} parameter
            to the end with '...' as the default. It will attempt to make the truncation 
            at a space or line break, but will search {wordcut} characters before forcing the wordcut.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.ProperCase(System.String,System.Boolean)">
            <summary>Capitalizes the first letter and all first letters after whitespace in a string.
            If {underscoreCountsAsSpace} is true then also capitalizes the first letter after an underscore '_'.
            </summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IncrementString(System.String,System.Nullable{System.Int32},System.String,System.Int32)">
            <summary>Increments integer +1 on the end of a string. IF the string does not contain an integer then
            will use {seedIfEmpty}.  You can specify a file extension at the end to ignore using {ignoreExtension}.
            If needed, you can set a value for {increment} to be other than 1.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>Returns a string {str} x {number} of times</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.StartsWith(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>A simplified overload of StartsWith that accepts a bool for {ignorecase}. 
            Defaults to false using CultureInfo.InvariantCulture</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.StartsWith(System.String,System.String[],System.Boolean,System.Globalization.CultureInfo)">
            <summary>An overload of StartsWith that accepts a string array.
            Will return true if any of the values in the {valuesArray} is true.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.StartsWith(System.String,System.Boolean,System.String[])">
            <summary>An overload of StartsWith that accepts a string params array.
            Will return true if any of the values in the params {valuesArray} is true.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.EndsWith(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>A simplified overload of EndsWith that accepts a bool for {ignorecase}. 
            Defaults to false using CultureInfo.InvariantCulture</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.EndsWith(System.String,System.String[],System.Boolean,System.Globalization.CultureInfo)">
            <summary>An overload of EndsWith that accepts a string array.
            Will return true if any of the values in the {valuesArray} is true.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.EndsWith(System.String,System.Boolean,System.String[])">
            <summary>An overload of EndsWith that accepts a string array.
            Will return true if any of the values in the params {valuesArray} is true.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.Contains(System.String,System.String,System.Boolean)">
            <summary>A simplified overload of Contains that accepts a bool for {ignorecase}. 
            Defaults to false using CultureInfo.InvariantCulture</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.Contains(System.String,System.String[],System.Boolean)">
            <summary>An overload of Contains that accepts a string array.
            Will return true if any of the values in the {valuesArray} is true.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.Contains(System.String,System.Boolean,System.String[])">
            <summary>An overload of Contains that accepts a string array.
            Will return true if any of the values in the params {valuesArray} is true.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.Replace(System.String,System.String[],System.String)">
            <summary>An overload of Replace that accepts a string array.
            For the supplied string, replaces all values in the {oldValues} array with the {newValue} string.</summary>
            <example>Shortcut for y.Replace("cat", "").Replace("dog", "") etc...</example>.
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.Replace(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>An overload of Replace that accepts a Dictionary of string,string.
            For the supplied string, replaces all instances in the matching the dictionary key with the dictionary value
            If {reverse} is true, replaces the matching dictionary value with the dictionary key.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.Replace(System.String,System.String[],System.String[])">
            <summary>An overload of Replace that accepts a string array.
            For the supplied string, replaces all values in the {oldValues} array with those in {newValues} array.</summary>
            <example>Shortcut for y.Replace("cat", "frog").Replace("dog", "bird") etc...</example>.
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.Split(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>An overload of Split with bools {trimEntries} and {removeEmptyEntries}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.Pluralize(System.Int32,System.String,System.String)">
            <summary>Will return the {singular} form of a word if {number} is equal to 1, otherwise returns {plural}. If the parameter
            {plural} is omitted, it will add an "s" to the end, or an "es" if {singular} ends in "s","x","ch","sh","z", or "o").</summary>
            <example>1.Pluralize("clown") returns "clown";</example>
            <example>3.Pluralize("clown") returns "clowns";</example>
            <example>3.Pluralize("fox") returns "foxes";</example>
            <example>5.Pluralize("child","children") returns "children";</example>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.Equals(System.String,System.String,System.Boolean)">
            Succinct overload of Equals() that compares the {str} to the {compareTo} and returns a bool true if equal.
            Takes an optional bool {ignoreCase} which uses StringComparison.Ordinal if
            false (the default) or StringComparison.OrdinalIgnoreCase if true.
        </member>
        <member name="M:WildHare.Extensions.ForTemplating.TemplatingExtensions.TSqlTypeToCSharpType(System.String,System.Boolean)">
            <summary>Converts a TSQL type name to a C# type name. It will remove the "System." namespace, if present</summary>
        </member>
        <member name="M:WildHare.Extensions.ForTemplating.TemplatingExtensions.DotNetTypeToCSharpType(System.String,System.Boolean)">
            <summary>Converts a .Net type name to a C# type name. It will remove the "System." namespace, if present</summary>
        </member>
        <member name="M:WildHare.Extensions.ForTemplating.TemplatingExtensions.BasicTypeNameFromValue(System.String,System.Boolean,System.String)">
            <summary>Given something like a string appsetting {value}, returns the string name from the first parsable type 
            (using invariant culture) in the following: bool, int, long, double, or string. If the param {strict} is true,
            the function will throw an exception. The {errorMessage} thrown can be customized.</summary>
        </member>
        <member name="M:WildHare.Extensions.ForTemplating.TemplatingExtensions.Template(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String)">
            <summary>Returns a string that replaces the placeholder elements [placeholder] in the {string} template with the matching the dictionary 
            lookup value with the. It will call .ToString() on non-string objects values in the dictionary if necessary.</summary>
        </member>
        <member name="M:WildHare.Extensions.ForTemplating.TemplatingExtensions.Template(System.Collections.Generic.Dictionary{System.String,System.Object},System.IO.FileInfo,System.String,System.String)">
            <summary>Returns a string that replaces the placeholder elements [placeholder] from the {templateFile} template with the matching the dictionary 
            lookup value with the. It will call .ToString() on non-string objects values in the dictionary if necessary.</summary>
        </member>
        <member name="M:WildHare.Extensions.ForTemplating.TemplatingExtensions.Template(System.Object,System.String,System.String,System.String)">
            <summary>Returns a string that replaces the placeholder elements [placeholder] in the {string} template with the matching the properties  
            of the current object. It will call .ToString() on non-string objects values in the dictionary if necessary.</summary>
        </member>
        <member name="M:WildHare.Extensions.ForTemplating.TemplatingExtensions.Template(System.Object,System.IO.FileInfo,System.String,System.String)">
            <summary>Returns a string that replaces the placeholder elements [placeholder] in the {templateFile} template with the matching the properties  
            of the current object. It will call .ToString() on non-string objects values in the dictionary if necessary.</summary>
        </member>
        <member name="M:WildHare.Extensions.ForTemplating.TemplatingExtensions.Template``1(``0,System.IO.FileInfo,System.String,System.String)">
            <summary>Returns a string that replaces the placeholder elements [placeholder] in the {templateFile} template with the matching the properties  
            of the current object of type &lt;T&gt;. It will call .ToString() on non-string objects values in the dictionary if necessary.</summary>
        </member>
        <member name="M:WildHare.Extensions.ForTemplating.TemplatingExtensions.TemplateList``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String)">
            <summary>Returns a string that replaces the placeholder elements '[placeholder]' in the string {template} matching the properties  
            for each item of type &lt;T&gt; in the {list}. It will call .ToString() on non-string objects values in the dictionary if necessary.
            If not null, {lineEnd} is added after each line of text, except for the last line. {startTag} and {endTag} default to '[' and ']' 
            respectively, wrapping the placeholder text but can be customized to the users preferences.</summary>
        </member>
        <member name="M:WildHare.Extensions.ForTemplating.TemplatingExtensions.TemplateList``1(System.Collections.Generic.IEnumerable{``0},System.IO.FileInfo,System.String,System.String,System.String)">
            <summary>Returns a string that replaces the placeholder elements '[placeholder]' in the string returned from the fileInfo {template}
            matching the properties for each item of type &lt;T&gt; in the {list}. It will call .ToString() on non-string objects values
            in the dictionary if necessary. If not null, {lineEnd} is added after each line of text, except for the last line. {startTag} and {endTag}
            default to '[' and ']' respectively, wrapping the placeholder text but can be customized to the users preferences.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaModel(System.Type)">
            <summary>Gets a MetaModel that describes the {type} for use in code generation.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaModel``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Gets a MetaModel that describes the {type} for (T) for use in code generation.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaModel``1(``0)">
            <summary>Gets a MetaModel that describes the {type} for the current instance for use in code generation.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaModel``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>Gets a MetaModel that describes the {type} of the current dictionary for use in code generation.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaProperties(System.Type)">
            <summary>Gets a list of MetaProperties for the current {type}.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaProperties(System.Type,System.String,System.String)">
            <summary>Gets a list of MetaProperties for the current {type}.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaProperties``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Gets a list of MetaProperties for the {type} for (T) for use in code generation. You can 
            include either an include or exclude list (but not both) to filter in/out these properties.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaProperties``1(``0,System.String,System.String)">
            <summary>Gets a list of MetaProperties for the Type for the current instance for use in code generation. You can 
            include either an include or exclude list (but not both) to filter in/out these properties.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetTypesInNamespace(System.Reflection.Assembly,System.String,System.String[])">
            <summary>Given an Assembly, returns a Type array of the types in the {namspace}. If {excludeList}
            is populated, any types with names that match a value in the list will be excluded.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetTypesInNamespace(System.Type,System.String,System.String[])">
            <summary>Given a Type, gets the Assembly from that type then returns a Type array of the types
            in the {namspace}. If {excludeList} is populated, any types with names that match a value
            in the list will be excluded.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaAssembly(System.Reflection.Assembly,System.String)">
            <summary></summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetDerivedClasses(System.Type,System.String[])">
            <summary>[OBSOLETE] GetDerivedClasses has been renamed to GetDerivedTypes
            and will be removed in a future version.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetDerivedTypes(System.Type,System.String[],System.Boolean,System.Reflection.Assembly)">
            <summary>Gets an array of derived Types that are a subclass of {type}, excluding any types named in
            the {ingnoreTypeNames} list. Set {includeBaseType} to true to include the baseType in Type array.
            Use {otherAssembly} when the derived classes to find are in another Assembly.</summary>
            <example>Called like:  var subClassesOfTeam = typeof(Team).GetDerivedTypes();</example>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.EqualsAny``1(``0,``0[])">
            <summary>Returns true if any of the T in the {list} is equal to the this {value}. Works for T </summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetAssemblyFromType(System.Type)">
            <summary>Gets the Assembly of a type. IE: an extension method version of Assembly.GetAssembly(type).</summary>
        </member>
        <member name="T:WildHare.DynamicExpando">
            <summary>Test Class Summary</summary>
        </member>
        <member name="M:WildHare.DynamicExpando.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>Test Property...</summary>
        </member>
        <member name="T:WildHare.MetaField">
            <summary>Simplified FieldInfo meta data </summary>
        </member>
        <member name="T:WildHare.MetaMethod">
            <summary>Simplified MethodInfo with custom methods</summary>
        </member>
        <member name="T:WildHare.MetaProperty">
            <summary>Simplified PropertyInfo meta data with custom Get and Set of the instance.</summary>
        </member>
        <member name="T:WildHare.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WildHare.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WildHare.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:WildHare.Xtra.XtraExtensions.Is(System.Object)">
            <summary>(EXPERIMENTAL)A simple shortcut method to test if an object {obj} is NOT null.</summary>
        </member>
        <member name="M:WildHare.Xtra.XtraExtensions.IsNull(System.Object)">
            <summary>(EXPERIMENTAL) A simple shortcut method to test if an object {obj} is null.</summary>
        </member>
        <member name="M:WildHare.Xtra.XtraExtensions.ToMapPath(System.String)">
            <summary>(EXPERIMENTAL) Turns a relative path in an application into an absolute file path similar the old MapPath function.</summary>
        </member>
        <member name="M:WildHare.Xtra.XtraExtensions.GetApplicationRoot">
            <summary>(EXPERIMENTAL) Gets the root path of an application. This can have different meanings in
            different types of applications, so check that your usage fully meets your needs before proceeding...</summary>
        </member>
        <member name="M:WildHare.Xtra.XtraExtensions.DynamicListOfType(System.Object)">
            <example>
            var list = CreateListOfType(typeof(Category)); // Is IList of object
            list.Add(new Category() { CategoryName = "Will"});
            </example>
        </member>
        <member name="M:WildHare.Xtra.XtraExtensions.DynamicArrayOfType(System.Object)">
            Alternative to DynamicListOfType. Not sure which is better.
            <example>
            var list = CreateListOfType(typeof(Category)); // Is IList of object
            list.Add(new Category() { CategoryName = "Will"});
            </example>
        </member>
    </members>
</doc>
