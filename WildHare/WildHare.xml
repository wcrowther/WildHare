<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WildHare</name>
    </assembly>
    <members>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToBool(System.String)">
            <summary>Converts string to bool. (case insensitive, defaults to false if string does not parse to true)</summary>
            <returns>An bool value</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToBoolNullable(System.String,System.Nullable{System.Boolean})">
            <summary>Converts string to bool. Can be null. (case insensitive)</summary>
            <returns>An bool value</returns>
            <documentation>Test1</documentation>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToBool(System.String,System.String,System.Boolean)">
            <summary>Converts string to bool by comparing to the trueValue. Ignores case by default.</summary>
            <example>"yes".ToBool("yes") return true.</example>
            <example>"Yes".ToBool("yes", false) return false.</example>
            <returns>An bool value</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToInt(System.String,System.Int32)">
            <summary>Converts strings to Int.</summary>
            <returns>An int value</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToIntNullable(System.String,System.Nullable{System.Int32})">
            <summary>Converts strings to Int if possible</summary>
            <returns>An int value or null</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToIntArray(System.String,System.Boolean)">
            <summary>Conerts a string to an array of ints. With {strict} equals false, the default, 
            the method will ignore any characters except for numbers, the negative symbol, or commas.
            With {strict} equals true, empty entries, alphabetic characters, etc. will cause exceptions.</summary>
            <returns>int[]</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToLong(System.String,System.Int64)">
            <summary>Converts strings to long</summary>
            <returns>A long value</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToLongNullable(System.String,System.Nullable{System.Int64})">
            <summary>Converts strings to long</summary>
            <returns>A long value or null</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToDouble(System.String,System.Double)">
            <summary>Converts strings to double.</summary>
            <returns>An double value</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToDoubleNullable(System.String,System.Nullable{System.Double})">
            <summary>Converts strings to double if possible</summary>
            <returns>An double value or null</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToDecimal(System.String,System.Decimal)">
            <summary>Converts strings to Decimal without without having to use an explicit try/catch</summary>
            <returns>A Decimal value</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToDecimalNullable(System.String,System.Nullable{System.Decimal})">
            <summary>Converts strings to Decimal if possible</summary>
            <returns>An Decimal value or null</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToDateTime(System.String,System.DateTime)">
            <summary>Converts strings to DateTime with default if unsuccessful</summary>
            <returns>A DateTime value</returns>
        </member>
        <member name="M:WildHare.Extensions.ConvertExtensions.ToDateTime(System.String,System.Nullable{System.DateTime})">
            <summary>Converts strings to DateTime with default value of nullable (datetime or null) 
            if unsuccessful</summary>
            <returns>A nullable DateTime value</returns>
        </member>
        <member name="M:WildHare.Extensions.DataTableExtensions.DataTableToList``1(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of T</summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <returns>List{T}</returns>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.GetNextDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>Given a DateTime like {date}, get the next {DayOfWeek}, like Sunday, Monday, etc. as DateTime.</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.FirstDayOfTheMonth(System.DateTime)">
            <summary>Gets a DateTime for the first day of the month for the given {datetime}.</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.FirstDayOfNextMonth(System.DateTime)">
            <summary>Gets a DateTime for the first day of the next month for the given {datetime}.</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.LastDayOfTheMonth(System.DateTime)">
            <summary>Gets a DateTime for the last day of the next month for the given {datetime}.</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.IsInTheSameMonth(System.DateTime,System.DateTime)">
            <summary>Returns a boolean true if the {datetime} and {target} at in the same month.</summary>
        </member>
        <member name="M:WildHare.Extensions.DateTimeExtensions.TodayOrBefore(System.DateTime)">
            <summary>Returns a boolean true if the {datetime} is today or before.</summary>
        </member>
        <member name="M:WildHare.Extensions.Xtra.XtraExtensions.GetXmlDocumentation(System.String,System.Reflection.Assembly)">
            <summary>(EXPERIMENTAL) Returns a list the Visual Studio Build Xml Documentation.
            Enable in VS by checking the Properties/Build/Enable Xml Documentation checkbox. On build,
            an XML file is generated to the file location with all the /// comments (like this one)
            that have been written in the your code.</summary>
            <example>@"C:\Code\Trunk\WildHare\WildHare\WildHare.xml"</example>
        </member>
        <member name="M:WildHare.Extensions.Xtra.XtraExtensions.Is(System.Object)">
            <summary>(EXPERIMENTAL)A simple shortcut method to test if an object {obj} is NOT null.</summary>
        </member>
        <member name="M:WildHare.Extensions.Xtra.XtraExtensions.IsNull(System.Object)">
            <summary>(EXPERIMENTAL) A simple shortcut method to test if an object {obj} is null.</summary>
        </member>
        <member name="M:WildHare.Extensions.Xtra.XtraExtensions.ToMapPath(System.String)">
            <summary>(EXPERIMENTAL) Turns a relative path in an application into an absolute file path similar the old MapPath function.</summary>
        </member>
        <member name="M:WildHare.Extensions.Xtra.XtraExtensions.GetApplicationRoot">
            <summary>(EXPERIMENTAL) Gets the root path of an application. This can have different meanings it
            different types of applications, so check that your usage fully meets your needs before proceeding...</summary>
        </member>
        <member name="M:WildHare.Extensions.ExpandoExtensions.Get``1(System.Dynamic.ExpandoObject,System.String)">
            <summary> Gets item by string {name} but does not throw an exception if it does not exist.
            If an ExpandoObject is cast to dynamic, be sure to cast back to ExpandoObject to see this extension method.</summary>
        </member>
        <member name="M:WildHare.Extensions.ExpandoExtensions.Get(System.Dynamic.ExpandoObject,System.String)">
            <summary> Gets a string by string {name} but does not throw an exception if it does not exist.
            If an ExpandoObject is cast to dynamic, be sure to cast back to ExpandoObject to see this extension method.</summary>
        </member>
        <member name="M:WildHare.Extensions.ExpandoExtensions.Add``1(System.Dynamic.ExpandoObject,System.String,``0)">
            <summary>Add a {value} of (T) to the Expando using a string {name}. </summary>
        </member>
        <member name="M:WildHare.Extensions.ExpandoExtensions.Add(System.Dynamic.ExpandoObject,System.String,System.String)">
            <summary>Add a string to the Expando using a string {name}. </summary>
        </member>
        <member name="M:WildHare.Extensions.ExpandoExtensions.Remove(System.Dynamic.ExpandoObject,System.String)">
            <summary>Remove a value from the Expando using a string {name}. </summary>
        </member>
        <member name="M:WildHare.Extensions.ExpandoExtensions.Get``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>Gets a value from an ExpandoObject by the specified {key}. If it does not exist, the
             method returns the {defaultVal}. If this is not specified, it is the default for that type.</summary>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.ElementIn``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Takes the element in the list at the position of {index} looping around if it is outside of the list.
            If no elements in the list, returns an exception.</summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="index"></param>
            <returns>&lt;TSource&gt;</returns>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.ElementInOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Takes the element in the list at the position of {index} looping around if it is outside of the list.
            Returns the {TSource} default if no items in the list.</summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="index"></param>
            <returns>TSource</returns>
        </member>
        <member name="M:WildHare.Extensions.IEnumerableExtensions.MatchList``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},System.Boolean)">
            <summary>Given two lists it returns values from first if the {func} is true. If {consecutive} 
            is false, continues returning values until one of the lists has no more elements.</summary>
        </member>
        <member name="T:WildHare.Extensions.IListExtensions">
            <summary>Class Summary</summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.TakeRandom``1(System.Collections.Generic.IList{``0},System.Int32,System.Random,System.Boolean)">
            <summary>Will randomly return a list of items from the {sourceList} equal to the {count} (up to the number in the list).<br />
            If the {count} is not specified, it will return one. If {remove} is true, the items are removed from the {sourceList}. </summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.TakeRandomOne``1(System.Collections.Generic.IList{``0},System.Random,System.Boolean)">
            <summary>Will randomly return a single item from the {sourceList}.  If {remove} is true, the item
            is removed from the {sourceList}.</summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.TakeNext``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Boolean)">
            <summary>Will return a sequencial list of items from the {sourceList} equal to the {count}(up to the number<b />
            remaining in the list).<br/>If the {count} is not specified, it will return one. If {remove} is true, the items
            are removed from the {sourceList}. If {offset} > 0, it will skip this number of records
            but will loop back to the beginning if necessary and elements exist.</summary>
        </member>
        <member name="M:WildHare.Extensions.IListExtensions.TakeNextOne``1(System.Collections.Generic.IList{``0},System.Int32,System.Boolean)">
            <summary>Will return a single item from the {sourceList}  If {remove} is true, the item
            is removed from the {sourceList}. If {offset} > 0, it will skip this number of records
            but will loop back to the beginning if necessary and elements exist.</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.WriteToFile(System.String,System.String,System.Boolean)">
            <summary>Writes the {stringToWrite} to the {fileName} string. If {overwrite} is true, it will
            overwrite existing file returning a success boolean. It will create the file if it does not exist,
            but will not create the parent folder structure if that is not in place.</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.WriteToFile(System.String,System.IO.FileInfo,System.Boolean)">
            <summary>Writes the {stringToWrite} to the {fileName} FileInfo. If {overwrite} is true, it will
            overwrite existing file returning a success boolean. It will create the file if it does not exist,
            but will not create the parent folder structure if that is not in place.</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.AppendToFile(System.String,System.String)">
            <summary>Writes the {stringToWrite} to the end of the {fileName} content, returning true or false.</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.AppendToFile(System.String,System.IO.FileInfo)">
            <summary>Writes the {stringToWrite} to the end of the {fileName} FileInfo content, returning true or false.</summary>
        </member>
        <member name="M:WildHare.Extensions.IOExtensions.GetAllDirectoriesAndFiles(System.IO.DirectoryInfo,System.Int32)">
            <summary>Gets a recursive list of FileSystemInfos (both directories and files) to a depth of {maxDepth}. Defaults to a depth of 2.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>Inline version of string.IsNullOrEmpty()</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IfNull(System.String,System.String)">
            <summary>A null string returns {replacement} if given, else an empty string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IfNullOrEmpty(System.String,System.String)">
            <summary>A null or empty string returns {replacement} if given, else an empty string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IsNullOrSpace(System.String)">
            <summary>Inline version of string.IsNullOrWhiteSpace()</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IfNullOrSpace(System.String,System.String)">
            <summary>A Null or whitespace string returns {replacement} if given, else an empty string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveStart(System.String,System.String)">
            <summary>Remove the start of a string if it exactly matches {start}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveEnd(System.String,System.String)">
            <summary>Remove the end of a string if it exactly matches {end}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveStartEnd(System.String,System.String,System.String)">
            <summary>Remove the start of a string if it matches {start} and end of a string if it matches {end}.
            If {end} is not specified use {start} for both values.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveStart(System.String,System.String[])">
            <summary>Removes the start of a string if it exactly matches any of the strings in the {startArray}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveEnd(System.String,System.String[])">
            <summary>Removes the end of a string if it exactly matches any of the strings in the {endArray}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveStartEnd(System.String,System.String[],System.String[])">
            <summary>Removes the start of a string if it exactly matches any of the strings in the {startArray} 
            and removse the end of a string if it exactly matches any of the strings in the {endArray}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveStartFromAllLines(System.String,System.String)">
            <summary>Remove the start of line if it exactly matches {start} for all lines in the string. 
            (This can be useful for programmatically removing indents from a long string.)</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveStartFromAllLines(System.String,System.String[])">
            <summary>Remove the start of line if it exactly matches any string in the {startArray} for all lines in the string. 
            (This can be useful for programmatically removing indents from a long string.)</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveEndFromAllLines(System.String,System.String)">
            <summary>Remove the end of line if it exactly matches {end} for all lines in the string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveEndFromAllLines(System.String,System.String[])">
            <summary>Remove the end of line if it exactly matches any string in the {endArray} for all lines in the string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.AddStart(System.String,System.String)">
            <summary>Adds {addToStart} to the beginning of the string if it is not NULL or EMPTY.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.AddEnd(System.String,System.String)">
            <summary>Adds {addToEnd} to the end of the string if it is not NULL or EMPTY.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.AddStartEnd(System.String,System.String,System.String)">
            <summary>Adds {addToEnd} to the beginning of the string if it does not start with that string AND
            adds {addToEnd} to the end of the string if it is not NULL or EMPTY.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.EnsureStart(System.String,System.String)">
            <summary>Adds {addToStart} to the beginning of the string UNLESS it already starts with that string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.EnsureEnd(System.String,System.String)">
            <summary>Adds {addToEnd} to the end of the string UNLESS it already starts with that string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.EnsureStartEnd(System.String,System.String,System.String)">
            <summary>Adds {addToStart} to the beginning of the string if it does not start with that string AND
            adds {addToEnd} to the end of the string if it does not end with that string. If {addToEnd}
            is null, adds {addToStart} to both the start and end.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.GetStart(System.String,System.String,System.Boolean)">
            <summary>Splits string into an array based on {separator} and returns the start element.
            Includes the separator if {includeSeparator} is true and it is contained in the string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.GetEnd(System.String,System.String,System.Boolean)">
            <summary>Splits string into an array based on {separator} and returns the end element.
            Includes the separator if {includeSeparator} is true and it is contained in the string.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.NumbersOnly(System.String,System.String)">
            <summary>Returns a string with only numbers and any additional characters in {otherCharacters}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.String,System.Int32)">
            <summary>Truncates a string down if it is over {maxcharacters}. If truncated it adds {more} parameter
            to the end with '...' as the default. It will attempt to make the truncation 
            at a space or line break, but will search {wordcut} characters before forcing the wordcut.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.ProperCase(System.String,System.Boolean)">
            <summary>Capitalizes the first letter and all first letters after whitespace in a string.
            If {underscoreCountsAsSpace} is true then also capitalizes the first letter after an underscore '_'.
            </summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.CharAt(System.String,System.Int32)">
            <summary>Returns the character at the position {i}.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.RemoveLineIndents(System.String,System.Int32,System.String)">
            <summary>Removes the indent from a block of text. Defaults to am empty space (' ') indent.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.IncrementString(System.String,System.Nullable{System.Int32},System.String,System.Int32)">
            <summary>Increments integer +1 on the end of a string</summary>
            <example>'File.txt'.IncrementString(".txt") = 'File1.txt'</example>
            <example>'File6.txt'.IncrementString(1,".txt") = 'File7.txt'</example>
            <returns>A string with end int incremented +1</returns>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>Returns a string {str} x {number} of times</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.StartsWith(System.String,System.String[],System.Boolean,System.Globalization.CultureInfo)">
            <summary>An overload of StartsWith that accepts a string array.
            Will return true if any of the values in the {valuesArray} is true.</summary>
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.Replace(System.String,System.String[],System.String)">
            <summary>An overload of Replace that accepts a string array.
            For the supplied string, replaces all values in the {oldValues} array with the {newValue} string.</summary>
            <example>Shortcut for y.Replace("cat", "").Replace("dog", "") etc...</example>.
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.Replace(System.String,System.String[],System.String[])">
            <summary>An overload of Replace that accepts a string array.
            For the supplied string, replaces all values in the {oldValues} array with those in {newValues} array.</summary>
            <example>Shortcut for y.Replace("cat", "frog").Replace("dog", "bird") etc...</example>.
        </member>
        <member name="M:WildHare.Extensions.StringExtensions.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>An overload of Split that accepts a single string as separator.</summary>
        </member>
        <member name="M:WildHare.Extensions.ForTemplating.TemplatingExtensions.TSqlTypeToCSharpType(System.String,System.Boolean)">
            <summary>Converts a TSQL type name to a C# type name. It will remove the "System." namespace, if present,</summary>
        </member>
        <member name="M:WildHare.Extensions.ForTemplating.TemplatingExtensions.DotNetTypeToCSharpType(System.String,System.Boolean)">
            <summary>Converts a .Net type name to a C# type name. It will remove the "System." namespace, if present,</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaModel(System.Type)">
            <summary>Gets a MetaModel that describes the {type} for use in code generation.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaModel``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Gets a MetaModel that describes the {type} for (T) for use in code generation.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaModel``1(``0)">
            <summary>Gets a MetaModel that describes the {type} for the current instance for use in code generation.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaModel``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>Gets a MetaModel that describes the {type} a the current dictionary for use in code generation.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaProperties(System.Type)">
            <summary>Gets a list of MetaProperties for the current {type}.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaProperties(System.Type,System.String,System.String)">
            <summary>Gets a list of MetaProperties for the current {type}.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaProperties``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Gets a list of MetaProperties for the {type} for (T) for use in code generation. You can 
            include either an include or exclude list (but not both) to filter in/out these properties.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetMetaProperties``1(``0,System.String,System.String)">
            <summary>Gets a list of MetaProperties for the Type for the current instance for use in code generation. You can 
            include either an include or exclude list (but not both) to filter in/out these properties.</summary>
        </member>
        <member name="M:WildHare.Extensions.TypeExtensions.GetTypesInNamespace(System.Reflection.Assembly,System.String)">
            <summary>Given an Assembly, returns a Type array of the types in the {namspace}.</summary>
        </member>
        <member name="T:WildHare.MetaProperty">
            <summary>Simplified PropertyInfo meta data with custom Get and Set of the instance.</summary>
        </member>
    </members>
</doc>
