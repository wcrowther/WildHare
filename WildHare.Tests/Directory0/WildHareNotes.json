{
     "WildHare" : {
          "MetaAssembly" : {
               "GetMetaDocumentationList(String xmlDocPath)" : "",
               "GetMetaModels(String exclude, String include)" : "",
               "GetMetaModelsForAnonymousTypes()" : "",
               "GetMetaModelsGroupedByNamespaces(String exclude, String include)" : "",
               "ToString()" : "",
               "WriteMetaAssemblyDescriptionToFile(String outputDirectory, String includeNamespaces, Boolean overwrite)" : "",
               "WriteMetaAssemblyNotesToJsonFile(String outputDirectory, String includedNamespaces, Boolean overwrite)" : "",
               "WriteXMLDocumentMemberNamesToFile(String xmlDocPath, String outputDirectory, Boolean overwrite)" : ""
          },
     },
     "WildHare.Extensions" : {
          "CharExtensions" : {
               "CharAt(String s, Int32 i)" : "",
               "GetUnicodeCategory(Char ch)" : "",
               "IsControl(Char ch)" : "",
               "IsDigit(Char ch)" : "",
               "IsLetter(Char ch)" : "",
               "IsLetterOrDigit(Char ch)" : "",
               "IsLower(Char ch)" : "",
               "IsNumber(Char ch)" : "",
               "IsPunctuation(Char ch)" : "",
               "IsReturn(Char ch)" : "",
               "IsSeparator(Char ch)" : "",
               "IsSymbol(Char ch)" : "",
               "IsUpper(Char ch)" : "",
               "IsWhiteSpace(Char ch)" : ""
          },
          "ConvertExtensions" : {
               "AsString(Int32[] intArray, Boolean strict, String separator)" : "",
               "ToBool(String value)" : "",
               "ToBool(String value, String trueValue, Boolean ignoreCase)" : "",
               "ToBoolNullable(String value, Nullable`1 defaultValue)" : "",
               "ToDateTime(String value, DateTime defaultValue)" : "",
               "ToDateTime(String value, Nullable`1 defaultValue)" : "",
               "ToDecimal(String value, Decimal defaultValue)" : "",
               "ToDecimalNullable(String value, Nullable`1 defaultValue)" : "",
               "ToDouble(String value, Double defaultValue)" : "",
               "ToDoubleNullable(String value, Nullable`1 defaultValue)" : "",
               "ToInt(String value, Int32 defaultValue)" : "",
               "ToInt(Boolean value)" : "",
               "ToInt(Nullable`1 value, Int32 ifNull)" : "",
               "ToIntArray(String str, Boolean strict, String separator)" : "",
               "ToIntNullable(String value, Nullable`1 defaultValue)" : "",
               "ToLong(String value, Int64 defaultValue)" : "",
               "ToLongNullable(String value, Nullable`1 defaultValue)" : ""
          },
          "DataReaderExtensions" : {
               "Get``1(IDataReader row, String fieldName, T defaultValue)" : "",
               "Get``1(IDataReader row, Int32 ordinal, T defaultValue)" : ""
          },
          "DataTableExtensions" : {
               "ToList``1(DataTable table)" : ""
          },
          "DateTimeExtensions" : {
               "FirstDayOfNextMonth(DateTime datetime)" : "",
               "FirstDayOfTheMonth(DateTime datetime)" : "",
               "GetNextDayOfWeek(DateTime date, DayOfWeek dayOfWeek, Boolean includeDate)" : "",
               "IsInTheSameMonth(DateTime datetime, DateTime target)" : "",
               "LastDayOfTheMonth(DateTime datetime)" : "",
               "MonthName(DateTime date)" : "",
               "MonthName(Int32 monthInt)" : "",
               "NextDayOfWeek(DateTime date, DayOfWeek dayOfWeek, Boolean includeCurrentDate)" : "",
               "ShortMonthName(DateTime date)" : "",
               "ShortMonthName(Int32 monthInt)" : "",
               "StartOfWeek(DateTime dt, DayOfWeek startOfWeek)" : "",
               "TodayOrBefore(DateTime datetime)" : "",
               "YearMonth(DateTime date)" : "",
               "YearMonthDay(DateTime date)" : ""
          },
          "DictionaryExtensions" : {
               "Get``1(IDictionary`2 dictionary, String key)" : "",
               "Set(IDictionary`2 dictionary, String key, Object value)" : "",
               "ToQueryDictionary(String query)" : "",
               "ToQueryString(IDictionary`2 dict)" : "",
               "TryGet``1(IDictionary`2 dictionary, String key, T& value)" : ""
          },
          "ExpandoExtensions" : {
               "Add``1(ExpandoObject expando, String name, T value)" : "",
               "Add(ExpandoObject expando, String name, String value)" : "",
               "Get``1(ExpandoObject expando, String name)" : "",
               "Get(ExpandoObject expando, String name)" : "",
               "Get``2(Dictionary`2 dictionary, TKey key, TVal defaultVal)" : "",
               "Remove(ExpandoObject expando, String name)" : ""
          },
          "IEnumerableExtensions" : {
               "AsString(IEnumerable`1 intList, Boolean strict)" : "",
               "ElementIn``1(IEnumerable`1 source, Int32 index)" : "",
               "ElementInOrDefault``1(IEnumerable`1 source, Int32 index, TSource defaultItem)" : "",
               "ElementInOrDefault``1(IEnumerable`1 source, Int32 index)" : "",
               "InList``2(IList`1 list, IList`1 items, Func`3 comparer)" : "",
               "JoinString``1(IEnumerable`1 list, String separator)" : "",
               "JoinString(IEnumerable`1 list, String separator)" : "",
               "JoinString(String[] list, String separator)" : "",
               "JoinString(String[] list, String separator, Int32 startIndex, Int32 count)" : "",
               "JoinString``1(IEnumerable`1 list, Char separator)" : "",
               "JoinString(IEnumerable`1 list, Char separator)" : "",
               "JoinString(String[] list, Char separator)" : "",
               "JoinString(String[] list, Char separator, Int32 startIndex, Int32 count)" : "",
               "MatchList``2(IEnumerable`1 list1, IEnumerable`1 list2, Func`3 func, Boolean consecutive)" : "",
               "PatternMatch``1(IEnumerable`1 list, IEnumerable`1 pattern, Func`3 func)" : "",
               "Pluralize``1(IEnumerable`1 list, String singular, String plural)" : "",
               "Sequence``2(IEnumerable`1 first, IEnumerable`1 second, Func`3 func, Boolean consecutive)" : "",
               "ToCollection``1(IEnumerable`1 enumerable)" : "",
               "WithIndex``1(IEnumerable`1 list)" : ""
          },
          "IListExtensions" : {
               "AddRange``1(IList`1 itemList, IEnumerable`1 newItems)" : "",
               "CombineItems``1(IList`1 itemList, Int32 index, Int32 count, T newItem)" : "",
               "IsFirstIn``1(T item, IList`1 itemList)" : "",
               "IsLastIn``1(T item, IList`1 itemList)" : "",
               "NextIn``1(T item, IList`1 itemList, Int32 distance)" : "",
               "NextInWhile``1(T item, IList`1 itemList, Func`2 func, Int32 step)" : "",
               "PreviousIn``1(T item, IList`1 itemList, Int32 distance)" : "",
               "PreviousInWhile``1(T item, IList`1 itemList, Func`2 func)" : "",
               "ReplaceItem``1(IList`1 itemList, Int32 index, T newItem)" : "",
               "ReplaceItems``1(IList`1 itemList, Int32 index, IList`1 newItems)" : "",
               "TakeNext``1(IList`1 sourceList, Int32 count, Int32 offset, Boolean remove)" : "",
               "TakeNextOne``1(IList`1 sourceList, Int32 offset, Boolean remove)" : "",
               "TakeRandom``1(IList`1 sourceList, Int32 count, Random random, Boolean remove)" : "",
               "TakeRandomOne``1(IList`1 sourceList, Random random, Boolean remove)" : ""
          },
          "IOExtensions" : {
               "AppendToFile(String stringToWrite, String fileName)" : "",
               "AppendToFile(String stringToWrite, FileInfo file)" : "",
               "GetAllDirectoriesAndFiles(DirectoryInfo directory, Int32 maxDepth)" : "",
               "GetAllFiles(String directoryPath, String searchPattern)" : "",
               "GetAllFiles(String directoryPath, String[] fileExtensions)" : "",
               "IsDirectory(FileSystemInfo info)" : "",
               "ReadFile(FileInfo fileInfo, Boolean strict)" : "",
               "WriteToFile(String stringToWrite, String fileName, Boolean overwrite)" : "",
               "WriteToFile(String stringToWrite, FileInfo file, Boolean overwrite)" : ""
          },
          "IQueryableExtensions" : {
               "OrderBy``1(IQueryable`1 items, String propertyName, Boolean desc, String defaultProperty)" : ""
          },
          "StringExtensions" : {
               "AddEnd(String s, String addToEnd)" : "",
               "AddStart(String s, String addToStart)" : "",
               "AddStartEnd(String s, String addToStart, String addToEnd)" : "",
               "CombineSpaces(String str, Boolean ignoreReturns)" : "",
               "EnsureEnd(String s, String addToEnd)" : "",
               "EnsureStart(String s, String addToStart)" : "",
               "EnsureStartEnd(String s, String addToStart, String addToEnd)" : "",
               "Equals(String str, String compareTo, Boolean ignoreCase)" : "",
               "ForEachLine(String input, Func`2 func)" : "",
               "Format(String format, Object arg0)" : "",
               "Format(String format, Object arg0, Object arg1)" : "",
               "Format(String format, Object arg0, Object arg1, Object arg2)" : "",
               "Format(String format, Object[] args)" : "",
               "Format(String format, IFormatProvider provider, Object arg0)" : "",
               "Format(String format, IFormatProvider provider, Object arg0, Object arg1)" : "",
               "Format(String format, IFormatProvider provider, Object arg0, Object arg1, Object arg2)" : "",
               "Format(String format, IFormatProvider provider, Object[] args)" : "",
               "GetEnd(String s, String separator, Boolean includeSeparator)" : "",
               "GetEndAfter(String s, String separator, Boolean includeSeparator)" : "",
               "GetStart(String s, String separator, Boolean includeSeparator)" : "",
               "GetStartBefore(String s, String separator, Boolean includeSeparator)" : "",
               "GetStartWhitespaces(String input)" : "",
               "IfNull(String s, String replacement)" : "",
               "IfNullOrEmpty(String s, String replacement)" : "",
               "IfNullOrSpace(String s, String replacement)" : "",
               "IfTrue(Boolean boolean, String ifTrueStr, String ifFalseStr)" : "",
               "IncrementString(String str, Nullable`1 seedIfEmpty, String ignoreExtension, Int32 increment)" : "",
               "IsNull(String s)" : "",
               "IsNullOrEmpty(String s)" : "",
               "IsNullOrSpace(String s)" : "",
               "Left(String str, Int32 length)" : "",
               "LettersOnly(String input, String otherCharacters)" : "",
               "Mid(String str, Int32 start, Nullable`1 count)" : "",
               "NullIf(String str, String str2)" : "",
               "NumbersOnly(String input, String otherCharacters)" : "",
               "Pluralize(Int32 number, String singular, String plural)" : "",
               "ProperCase(String input, Boolean underscoreCountsAsSpace)" : "",
               "RemoveEnd(String input, String end)" : "",
               "RemoveEnd(String input, String[] endArray)" : "",
               "RemoveEndFromAllLines(String input, String end)" : "",
               "RemoveEndFromAllLines(String input, String[] endArray)" : "",
               "RemoveIndents(String input, Boolean removeInitialSpaces)" : "",
               "RemoveStart(String input, String start)" : "",
               "RemoveStart(String input, String[] startArray)" : "",
               "RemoveStartEnd(String input, String start, String end)" : "",
               "RemoveStartEnd(String input, String[] startArray, String[] endArray)" : "",
               "RemoveStartFromAllLines(String input, String start)" : "",
               "RemoveStartFromAllLines(String input, String[] startArray)" : "",
               "Repeat(String str, Int32 number)" : "",
               "Replace(String str, String[] oldValues, String newValue)" : "",
               "Replace(String str, Dictionary`2 dictionary, Boolean reverse)" : "",
               "Replace(String str, String[] oldValues, String[] newValues)" : "",
               "ReplaceLineReturns(String str, String replacement)" : "",
               "Right(String str, Int32 length)" : "",
               "SingularOrPlural(Int32 number, String singular, String plural)" : "",
               "Split(String str, String separator, StringSplitOptions options)" : "",
               "StartsWith(String str, String[] valuesArray, Boolean ignoreCase, CultureInfo culture)" : "",
               "Truncate(String input, Int32 maxCharacters, String more, Int32 wordcut)" : ""
          },
          "TypeExtensions" : {
               "GetCommonBaseType(Type[] types)" : "",
               "GetCommonInterfaces(Object[] objects)" : "",
               "GetDerivedClasses(Type type, String[] ignoreTypeNames)" : "",
               "GetDerivedTypes(Type type, String[] ignoreTypeNames, Boolean includeBaseType, Assembly otherAssembly)" : "",
               "GetMetaAssembly(Assembly assembly, String xmlDocumentationPath)" : "",
               "GetMetaModel(Type type)" : "",
               "GetMetaModel``1(IEnumerable`1 enumerable)" : "",
               "GetMetaModel``1(T instance)" : "",
               "GetMetaModel``2(Dictionary`2 dictionary)" : "",
               "GetMetaProperties(Type type)" : "",
               "GetMetaProperties(Type type, String exclude, String include)" : "",
               "GetMetaProperties``1(IEnumerable`1 enumerable, String exclude, String include)" : "",
               "GetMetaProperties``1(T instance, String exclude, String include)" : "",
               "GetTypesInNamespace(Assembly assembly, String nameSpace)" : ""
          },
     },
     "WildHare.Extensions.ForTemplating" : {
          "TemplatingExtensions" : {
               "DotNetTypeToCSharpType(String dotNetTypeName, Boolean isNull)" : "",
               "Template(Dictionary`2 lookups, String template, String startTag, String endTag)" : "",
               "Template(Dictionary`2 lookups, FileInfo templateFile, String startTag, String endTag)" : "",
               "Template(Object obj, String template, String startTag, String endTag)" : "",
               "Template(Object obj, FileInfo templateFile, String startTag, String endTag)" : "",
               "Template``1(T obj, FileInfo templateFile, String startTag, String endTag)" : "",
               "TemplateList``1(IEnumerable`1 list, String template, String lineEnd, String startTag, String endTag)" : "",
               "TemplateList``1(IEnumerable`1 list, FileInfo templateFile, String lineEnd, String startTag, String endTag)" : "",
               "TSqlTypeToCSharpType(String sqlTypeName, Boolean isNull)" : ""
          },
     },
     "WildHare.Extensions.Xtra" : {
          "XtraExtensions" : {
               "DynamicArrayOfType(Object t)" : "",
               "DynamicListOfType(Object t)" : "",
               "GetApplicationRoot()" : "",
               "GetXmlDocumentation(String xmlDocPath, Assembly assemblyToDocument)" : "",
               "ToMapPath(String fileName)" : ""
          },
          "RandomExtensions" : {
               "Skip(Random random, Int32 number)" : ""
          },
     },
     "WildHare.Models" : {
          "DocMember" : {
               "ToString()" : ""
          },
          "DynamicDictionary" : {
               "Clear()" : "",
               "TryGetMember(GetMemberBinder binder, Object& result)" : "",
               "TrySetMember(SetMemberBinder binder, Object value)" : ""
          },
          "DynamicExpando" : {
               "Clear()" : "",
               "First()" : "",
               "FirstOrDefault()" : "",
               "Remove(String key)" : "",
               "ToDictionary()" : "",
               "ToList()" : "",
               "TryGetMember(GetMemberBinder binder, Object& result)" : "",
               "TrySetMember(SetMemberBinder binder, Object value)" : ""
          },
          "MetaDocumentation" : {
               "MemberId()" : "",
               "MemberType()" : "",
               "ToString()" : ""
          },
          "MetaField" : {
               "ToString()" : ""
          },
          "MetaMethod" : {
               "GetGenericArguments()" : "",
               "IsInherited(String typeName)" : "",
               "ToString()" : ""
          },
          "MetaModel" : {
               "GetMetaMethods(String exclude, String include, Boolean includeInherited)" : "",
               "GetMetaProperties(String exclude, String include)" : "",
               "Implements(String interfaceName)" : "",
               "ToString()" : ""
          },
          "MetaNamespace" : {
               "ToString()" : ""
          },
          "MetaParameter" : {
               "ToString()" : ""
          },
          "MetaProperty" : {
               "GetInstanceValue(Object instance)" : "",
               "Implements(String interfaceName)" : "",
               "SetInstanceValue(Object value, Object instance)" : "",
               "ToString()" : ""
          },
          "TestModel" : {
          },
     },
     "WildHare.Properties" : {
          "Resources" : {
          },
     }
}
