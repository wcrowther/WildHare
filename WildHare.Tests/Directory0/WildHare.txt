WildHare Assembly
-------------------------


WildHare: DocMember
   get_ClassName()
   get_ClassProperties()
   get_ClassType()
   get_CodeElement()
   get_Display()
   get_Documentation()
   get_Examples()
   get_Generics()
   get_IsExtensionMethod()
   get_IsStaticMethod()
   get_Member()
   get_MethodInfo()
   get_MethodParams()
   get_Namespace()
   get_RawName()
   get_Reference()
   get_Summary()
   set_Display(System.Boolean value)
   set_Documentation(System.String value)
   set_Examples(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] value)
   set_RawName(System.String value)
   set_Reference(System.String value)
   set_Summary(System.String value)
   ToString()
WildHare: DynamicDictionary
   Clear()
   get_Item(System.String key)
   set_Item(System.String key, System.Object value)
   TryGetMember(System.Dynamic.GetMemberBinder binder, System.Object& result)
   TrySetMember(System.Dynamic.SetMemberBinder binder, System.Object value)
WildHare: DynamicExpando
   Clear()
   First()
   FirstOrDefault()
   get_Count()
   get_Item(System.String key)
   Remove(System.String key)
   set_Item(System.String key, System.Object value)
   ToDictionary()
   ToList()
   TryGetMember(System.Dynamic.GetMemberBinder binder, System.Object& result)
   TrySetMember(System.Dynamic.SetMemberBinder binder, System.Object value)
WildHare: MetaAssembly
   get_AssemblyName()
   GetMetaModels()
   ToString()
   WriteMetaAssemblyToFile(System.String outputDirectory, System.String xmlDocPath, System.Boolean overwrite)
WildHare: MetaDocumentation
   get_Documentation()
   get_MemberName()
   get_Summary()
   MemberId()
   MemberType()
   set_Documentation(System.String value)
   set_Summary(System.String value)
   ToString()
WildHare: MetaMethod
   get_DeclaringType()
   get_IsExtensionMethod()
   get_IsGetter()
   get_IsSetter()
   get_IsStaticMethod()
   get_Name()
   get_Parameters()
   get_Summary()
   IsInherited(System.String typeName)
   set_Summary(System.String value)
   ToString()
WildHare: MetaModel
   get_DictionaryKeyType()
   get_DictionaryValueType()
   get_IsAnonymousType()
   get_IsDictionary()
   get_IsStaticType()
   get_PrimaryKeyMeta()
   get_PrimaryKeyName()
   get_Summary()
   get_TypeName()
   get_TypeNamespace()
   GetMetaMethods(System.String exclude, System.String include, System.Boolean includeInherited)
   GetMetaProperties(System.String exclude, System.String include)
   Implements(System.String interfaceName)
   set_Summary(System.String value)
   ToString()
WildHare: MetaParameter
   get_Name()
   get_ParameterType()
   ToString()
WildHare: MetaProperty
   get_CanWrite()
   get_IsKey()
   get_Name()
   get_PropertyType()
   GetInstanceValue(System.Object instance)
   Implements(System.String interfaceName)
   SetInstanceValue(System.Object value, System.Object instance)
   ToString()
WildHare.Properties: Resources
WildHare.Models: TestModel
   get_Name()
   set_Name(System.String value)
WildHare.Extensions: CharExtensions
   CharAt(System.String s, System.Int32 i)
   GetUnicodeCategory(System.Char ch)
   IsControl(System.Char ch)
   IsDigit(System.Char ch)
   IsLetter(System.Char ch)
   IsLetterOrDigit(System.Char ch)
   IsLower(System.Char ch)
   IsNumber(System.Char ch)
   IsPunctuation(System.Char ch)
   IsSeparator(System.Char ch)
   IsSymbol(System.Char ch)
   IsUpper(System.Char ch)
   IsWhiteSpace(System.Char ch)
WildHare.Extensions: ConvertExtensions
   AsString(System.Int32[] intArray, System.Boolean strict, System.String separator)
   ToBool(System.String value)
   ToBool(System.String value, System.String trueValue, System.Boolean ignoreCase)
   ToBoolNullable(System.String value, System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] defaultValue)
   ToDateTime(System.String value, System.DateTime defaultValue)
   ToDateTime(System.String value, System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] defaultValue)
   ToDecimal(System.String value, System.Decimal defaultValue)
   ToDecimalNullable(System.String value, System.Nullable`1[[System.Decimal, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] defaultValue)
   ToDouble(System.String value, System.Double defaultValue)
   ToDoubleNullable(System.String value, System.Nullable`1[[System.Double, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] defaultValue)
   ToInt(System.String value, System.Int32 defaultValue)
   ToIntArray(System.String str, System.Boolean strict, System.String separator)
   ToIntNullable(System.String value, System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] defaultValue)
   ToLong(System.String value, System.Int64 defaultValue)
   ToLongNullable(System.String value, System.Nullable`1[[System.Int64, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] defaultValue)
WildHare.Extensions: DataReaderExtensions
   Get(System.Data.IDataReader row, System.String fieldName,  defaultValue)
   Get(System.Data.IDataReader row, System.Int32 ordinal,  defaultValue)
WildHare.Extensions: DataTableExtensions
   ToList(System.Data.DataTable table)
WildHare.Extensions: DateTimeExtensions
   FirstDayOfNextMonth(System.DateTime datetime)
   FirstDayOfTheMonth(System.DateTime datetime)
   GetNextDayOfWeek(System.DateTime date, System.DayOfWeek dayOfWeek, System.Boolean includeDate)
   IsInTheSameMonth(System.DateTime datetime, System.DateTime target)
   LastDayOfTheMonth(System.DateTime datetime)
   MonthName(System.DateTime date)
   MonthName(System.Int32 monthInt)
   NextDayOfWeek(System.DateTime date, System.DayOfWeek dayOfWeek, System.Boolean includeCurrentDate)
   ShortMonthName(System.DateTime date)
   ShortMonthName(System.Int32 monthInt)
   StartOfWeek(System.DateTime dt, System.DayOfWeek startOfWeek)
   TodayOrBefore(System.DateTime datetime)
   YearMonth(System.DateTime date)
   YearMonthDay(System.DateTime date)
WildHare.Extensions: DictionaryExtensions
   Get(System.Collections.Generic.IDictionary`2[[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] dictionary, System.String key)
   Set(System.Collections.Generic.IDictionary`2[[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] dictionary, System.String key, System.Object value)
   ToQueryDictionary(System.String query)
   ToQueryString(System.Collections.Generic.IDictionary`2[[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] dict)
   TryGet(System.Collections.Generic.IDictionary`2[[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] dictionary, System.String key,  value)
WildHare.Extensions: ExpandoExtensions
   Add(System.Dynamic.ExpandoObject expando, System.String name,  value)
   Add(System.Dynamic.ExpandoObject expando, System.String name, System.String value)
   Get(System.Dynamic.ExpandoObject expando, System.String name)
   Get(System.Dynamic.ExpandoObject expando, System.String name)
   Get( dictionary,  key,  defaultVal)
   Remove(System.Dynamic.ExpandoObject expando, System.String name)
WildHare.Extensions: IEnumerableExtensions
   AsString(System.Collections.Generic.IEnumerable`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] intList, System.Boolean strict)
   ElementIn( source, System.Int32 index)
   ElementInOrDefault( source, System.Int32 index,  defaultItem)
   ElementInOrDefault( source, System.Int32 index)
   InList( list,  items,  comparer)
   MatchList( list1,  list2,  func, System.Boolean consecutive)
   PatternMatch( list,  pattern,  func)
   Pluralize( list, System.String singular, System.String plural)
   Sequence( first,  second,  func, System.Boolean consecutive)
   ToCollection( enumerable)
   WithIndex( list)
WildHare.Extensions: IListExtensions
   AddRange( itemList,  newItems)
   CombineItems( itemList, System.Int32 index, System.Int32 count,  newItem)
   IsFirstIn( item,  itemList)
   IsLastIn( item,  itemList)
   NextIn( item,  itemList, System.Int32 distance)
   NextInWhile( item,  itemList,  func, System.Int32 step)
   PreviousIn( item,  itemList, System.Int32 distance)
   PreviousInWhile( item,  itemList,  func)
   ReplaceItem( itemList, System.Int32 index,  newItem)
   ReplaceItems( itemList, System.Int32 index,  newItems)
   TakeNext( sourceList, System.Int32 count, System.Int32 offset, System.Boolean remove)
   TakeNextOne( sourceList, System.Int32 offset, System.Boolean remove)
   TakeRandom( sourceList, System.Int32 count, System.Random random, System.Boolean remove)
   TakeRandomOne( sourceList, System.Random random, System.Boolean remove)
WildHare.Extensions: IOExtensions
   AppendToFile(System.String stringToWrite, System.String fileName)
   AppendToFile(System.String stringToWrite, System.IO.FileInfo file)
   GetAllDirectoriesAndFiles(System.IO.DirectoryInfo directory, System.Int32 maxDepth)
   GetAllFiles(System.String directoryPath, System.String searchPattern)
   GetAllFiles(System.String directoryPath, System.String[] fileExtensions)
   IsDirectory(System.IO.FileSystemInfo info)
   ReadFile(System.IO.FileInfo fileInfo, System.Boolean strict)
   WriteToFile(System.String stringToWrite, System.String fileName, System.Boolean overwrite)
   WriteToFile(System.String stringToWrite, System.IO.FileInfo file, System.Boolean overwrite)
WildHare.Extensions: IQueryableExtensions
   OrderBy( items, System.String propertyName, System.Boolean desc, System.String defaultProperty)
WildHare.Extensions: StringExtensions
   AddEnd(System.String s, System.String addToEnd)
   AddStart(System.String s, System.String addToStart)
   AddStartEnd(System.String s, System.String addToStart, System.String addToEnd)
   EnsureEnd(System.String s, System.String addToEnd)
   EnsureStart(System.String s, System.String addToStart)
   EnsureStartEnd(System.String s, System.String addToStart, System.String addToEnd)
   Equals(System.String str, System.String compareTo, System.Boolean ignoreCase)
   ForEachLine(System.String input, System.Func`2[[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] func)
   Format(System.String format, System.Object arg0)
   Format(System.String format, System.Object arg0, System.Object arg1)
   Format(System.String format, System.Object arg0, System.Object arg1, System.Object arg2)
   Format(System.String format, System.Object[] args)
   Format(System.String format, System.IFormatProvider provider, System.Object arg0)
   Format(System.String format, System.IFormatProvider provider, System.Object arg0, System.Object arg1)
   Format(System.String format, System.IFormatProvider provider, System.Object arg0, System.Object arg1, System.Object arg2)
   Format(System.String format, System.IFormatProvider provider, System.Object[] args)
   GetEnd(System.String s, System.String separator, System.Boolean includeSeparator)
   GetEndAfter(System.String s, System.String separator, System.Boolean includeSeparator)
   GetStart(System.String s, System.String separator, System.Boolean includeSeparator)
   GetStartBefore(System.String s, System.String separator, System.Boolean includeSeparator)
   GetStartWhitespaces(System.String input)
   IfNull(System.String s, System.String replacement)
   IfNullOrEmpty(System.String s, System.String replacement)
   IfNullOrSpace(System.String s, System.String replacement)
   IncrementString(System.String str, System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] seedIfEmpty, System.String ignoreExtension, System.Int32 increment)
   IsNull(System.String s)
   IsNullOrEmpty(System.String s)
   IsNullOrSpace(System.String s)
   Left(System.String str, System.Int32 length)
   LettersOnly(System.String input, System.String otherCharacters)
   Mid(System.String str, System.Int32 start, System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] count)
   NullIf(System.String str, System.String str2)
   NumbersOnly(System.String input, System.String otherCharacters)
   Pluralize(System.Int32 number, System.String singular, System.String plural)
   ProperCase(System.String input, System.Boolean underscoreCountsAsSpace)
   RemoveEnd(System.String input, System.String end)
   RemoveEnd(System.String input, System.String[] endArray)
   RemoveEndFromAllLines(System.String input, System.String end)
   RemoveEndFromAllLines(System.String input, System.String[] endArray)
   RemoveIndents(System.String input, System.Boolean removeInitialSpaces)
   RemoveStart(System.String input, System.String start)
   RemoveStart(System.String input, System.String[] startArray)
   RemoveStartEnd(System.String input, System.String start, System.String end)
   RemoveStartEnd(System.String input, System.String[] startArray, System.String[] endArray)
   RemoveStartFromAllLines(System.String input, System.String start)
   RemoveStartFromAllLines(System.String input, System.String[] startArray)
   Repeat(System.String str, System.Int32 number)
   Replace(System.String str, System.String[] oldValues, System.String newValue)
   Replace(System.String str, System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] dictionary, System.Boolean reverse)
   Replace(System.String str, System.String[] oldValues, System.String[] newValues)
   Right(System.String str, System.Int32 length)
   SingularOrPlural(System.Int32 number, System.String singular, System.String plural)
   Split(System.String str, System.String separator, System.StringSplitOptions options)
   StartsWith(System.String str, System.String[] valuesArray, System.Boolean ignoreCase, System.Globalization.CultureInfo culture)
   Truncate(System.String input, System.Int32 maxCharacters, System.String more, System.Int32 wordcut)
WildHare.Extensions: TypeExtensions
   GetCommonBaseType(System.Type[] types)
   GetCommonInterfaces(System.Object[] objects)
   GetDerivedClasses(System.Type type, System.String[] ignoreTypeNames)
   GetDerivedTypes(System.Type type, System.String[] ignoreTypeNames, System.Boolean includeBaseType, System.Reflection.Assembly otherAssembly)
   GetMetaAssembly(System.Reflection.Assembly assembly)
   GetMetaModel(System.Type type)
   GetMetaModel( enumerable)
   GetMetaModel( instance)
   GetMetaModel( dictionary)
   GetMetaProperties(System.Type type)
   GetMetaProperties(System.Type type, System.String exclude, System.String include)
   GetMetaProperties( enumerable, System.String exclude, System.String include)
   GetMetaProperties( instance, System.String exclude, System.String include)
   GetTypesInNamespace(System.Reflection.Assembly assembly, System.String nameSpace)
WildHare.Extensions.ForTemplating: TemplatingExtensions
   DotNetTypeToCSharpType(System.String dotNetTypeName, System.Boolean isNull)
   Template(System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] lookups, System.String template, System.String startTag, System.String endTag)
   Template(System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] lookups, System.IO.FileInfo templateFile, System.String startTag, System.String endTag)
   Template(System.Object obj, System.String template, System.String startTag, System.String endTag)
   Template(System.Object obj, System.IO.FileInfo templateFile, System.String startTag, System.String endTag)
   Template( obj, System.IO.FileInfo templateFile, System.String startTag, System.String endTag)
   TemplateList( list, System.String template, System.String lineEnd, System.String startTag, System.String endTag)
   TemplateList( list, System.IO.FileInfo templateFile, System.String lineEnd, System.String startTag, System.String endTag)
   TSqlTypeToCSharpType(System.String sqlTypeName, System.Boolean isNull)
WildHare.Extensions.Xtra: XtraExtensions
   DynamicArrayOfType(System.Object t)
   DynamicListOfType(System.Object t)
   GetApplicationRoot()
   GetXmlDocumentation(System.String xmlDocPath, System.Reflection.Assembly assemblyToDocument)
   Is(System.Object obj)
   IsNull(System.Object obj)
   ToMapPath(System.String fileName)
WildHare.Extensions.Xtra: RandomExtensions
   Skip(System.Random random, System.Int32 number)
